#
# المرحلة 1: بناء تطبيق Spring Boot
# هذه المرحلة تستخدم صورة Maven لترجمة التطبيق وإنشاء ملف JAR التنفيذي.
#
FROM maven:3.8.7-openjdk-17-slim AS build

# تعيين دليل العمل داخل الحاوية
WORKDIR /app

# نسخ ملف pom.xml أولاً للاستفادة من ذاكرة التخزين المؤقت لـ Docker
# إذا تغير فقط الكود المصدري، فلن يعاد تنزيل التبعيات في كل مرة.
COPY pom.xml .

# نسخ باقي الكود المصدري للتطبيق
COPY src ./src

# بناء التطبيق
# -DskipTests: لتخطي تشغيل الاختبارات لتسريع عملية البناء في Docker.
#               يمكن تشغيل الاختبارات في خطوة CI/CD منفصلة.
RUN mvn clean install -DskipTests

#
# المرحلة 2: إنشاء صورة تشغيل خفيفة الوزن نهائية
# هذه المرحلة تستخدم صورة JRE خفيفة الوزن لتشغيل ملف JAR المترجم.
# يتم نسخ فقط ملف JAR من المرحلة السابقة لتقليل حجم الصورة النهائية.
#
FROM openjdk:17-jre-slim

# تعيين دليل العمل في صورة وقت التشغيل
WORKDIR /app

# نسخ ملف JAR المترجم من مرحلة 'build'
# افترض أن اسم ملف JAR الناتج هو `smart-clinic-app.jar`
# تأكد من مطابقة هذا الاسم مع `finalName` في ملف pom.xml الخاص بك، أو استخدم `*.jar` للنسخ
COPY --from=build /app/target/smart-clinic-app.jar smart-clinic-app.jar

# كشف المنفذ الذي يستمع عليه تطبيق Spring Boot (الافتراضي هو 8080)
EXPOSE 8080

# تعريف الأمر لتشغيل تطبيقك عند بدء تشغيل الحاوية
# استخدام ENTRYPOINT يضمن أن هذا الأمر سيتم تنفيذه دائمًا عند بدء الحاوية.
ENTRYPOINT ["java", "-jar", "smart-clinic-app.jar"]

# اختياري: إذا كان تطبيقك يحتاج إلى ملفات تعريف Spring محددة أو وسائط،
# يمكنك إضافتها إلى CMD. على سبيل المثال، لتشغيل مع ملف تعريف 'prod':
# CMD ["--spring.profiles.active=prod"]